name: LoanPredict Pro Banking CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  
jobs:
  # Job 1: Testing y Calidad de Código
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests & Quality
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: 🔍 Lint con flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🧪 Tests unitarios
      run: |
        pytest tests/ -v --cov=models --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: banking-model-coverage

  # Job 2: Validación del Modelo Bancario
  model-validation:
    runs-on: ubuntu-latest
    name: 🏦 Banking Model Validation
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🏦 Validar modelo bancario
      run: |
        python -c "
        from models.loan_predictor import LoanPredictor
        print('🔄 Inicializando modelo bancario...')
        predictor = LoanPredictor()
        predictor.train_model(use_ensemble=True)
        metrics = predictor.get_model_metrics()
        
        # Validar métricas bancarias
        accuracy = metrics['accuracy']
        precision = metrics['precision'] 
        recall = metrics['recall']
        roc_auc = metrics['roc_auc']
        
        print(f'📊 Métricas del modelo:')
        print(f'   Accuracy: {accuracy:.3f}')
        print(f'   Precision: {precision:.3f}')
        print(f'   Recall: {recall:.3f}')
        print(f'   ROC-AUC: {roc_auc:.3f}')
        
        # Criterios bancarios mínimos
        assert accuracy >= 0.85, f'Accuracy {accuracy:.3f} < 0.85 (mínimo bancario)'
        assert precision >= 0.80, f'Precision {precision:.3f} < 0.80 (control riesgo)'
        assert recall >= 0.85, f'Recall {recall:.3f} < 0.85 (captura oportunidades)'
        assert roc_auc >= 0.90, f'ROC-AUC {roc_auc:.3f} < 0.90 (discriminación)'
        
        print('✅ Modelo aprobado para producción bancaria')
        "

  # Job 3: Security Scan
  security:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔒 Bandit Security Scan
      run: |
        pip install bandit
        bandit -r . -x tests/ -f json -o bandit-report.json || true
        
    - name: 📋 Safety Check
      run: |
        pip install safety
        safety check --json || true

  # Job 4: Build & Deploy
  deploy:
    runs-on: ubuntu-latest
    name: 🚀 Deploy Banking App
    needs: [test, model-validation, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Build aplicación
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Crear directorio de build
        mkdir -p build/
        
        # Copiar archivos necesarios
        cp -r templates/ build/
        cp -r static/ build/
        cp -r models/ build/
        cp app.py build/
        cp requirements.txt build/
        
        echo "✅ Build completado"
        
    - name: 🧪 Test de smoke
      run: |
        cd build/
        python -c "
        import sys
        sys.path.append('.')
        from models.loan_predictor import LoanPredictor
        
        # Test básico
        predictor = LoanPredictor()
        test_data = {
            'ApplicantIncome': 5000,
            'CoapplicantIncome': 0,
            'LoanAmount': 150,
            'Loan_Amount_Term': 360,
            'Credit_History': 1,
            'Married': 'Yes',
            'Education': 'Graduate', 
            'Property_Area': 'Urban'
        }
        
        # Debe cargar sin errores
        print('🏦 Sistema bancario funcionando correctamente')
        "
        
    - name: 📦 Create Release Artifact
      if: success()
      run: |
        cd build/
        tar -czf ../loanpredict-banking-${{ github.sha }}.tar.gz .
        
    - name: 📤 Upload Build Artifact
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: loanpredict-banking-build
        path: loanpredict-banking-${{ github.sha }}.tar.gz
        retention-days: 30

  # Job 5: Notificación
  notify:
    runs-on: ubuntu-latest
    name: 📬 Notify Status
    needs: [test, model-validation, security, deploy]
    if: always()
    
    steps:
    - name: 📬 Notificar resultado
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Pipeline completado exitosamente"
          echo "🏦 LoanPredict Pro Banking listo para producción"
          echo "📊 Modelo validado con métricas bancarias"
          echo "🔒 Escaneado de seguridad completado"
        else
          echo "❌ Pipeline falló - Revisar logs"
          echo "🔍 Verificar métricas del modelo bancario"
        fi